// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2813.SkrrtSkrrt;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_VictorSPX driveTrainLeftMotor;
    public static VictorSPX driveTrainLeftMotorFollow;
    public static WPI_VictorSPX driveTrainRightMotor;
    public static VictorSPX driveTrainRightMotorFollow;
    public static RobotDrive driveTrainRobotDrive;
    public static final int solenoidChanger = 1;
    public static WPI_VictorSPX elevationLeft;
    public static WPI_VictorSPX elevationRight;
	public static final int switchSolenoidPort = 1;	// This solenoid controls which tank will be pressurized next
	// For example to map the left and right motors, you could define the
	// following variables to use with your drivetrain subsystem.
	// public static int leftMotor = 1;
	// public static int rightMotor = 2;
	public static final int masterSolenoidPort = -1; 	// -1 here means there is no master solenoid
	public static final boolean hasCompressor = false;
	public static final int leftCannonSolenoid = 0;		// Solenoid on left pressure valve
	public static final int rightCannonSolenoid = 7;	// Solenoid on right pressure valve
	public static DigitalInput leftHighLimitSwitch;
	public static DigitalInput leftLowLimitSwitch;
	public static DigitalInput rightHighLimitSwitch;
	public static DigitalInput rightLowLimitSwitch;
	// If you are using multiple modules, make sure to define both the port
	// number and the module. For example you with a rangefinder:
	// public static int rangefinderPort = 1;
	// public static int rangefinderModule = 1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftMotor = new WPI_VictorSPX(0);
        LiveWindow.addActuator("Drivetrain", "LeftMotor - 0", (WPI_VictorSPX) driveTrainLeftMotor);
        driveTrainLeftMotor.setInverted(false);
        
        driveTrainLeftMotorFollow = new VictorSPX(1);
        driveTrainLeftMotorFollow.setInverted(driveTrainLeftMotor.getInverted());
        driveTrainLeftMotorFollow.set(ControlMode.Follower, driveTrainLeftMotor.getDeviceID());
        
        driveTrainRightMotor = new WPI_VictorSPX(2);
        LiveWindow.addActuator("Drivetrain", "RightMotor - 2", (WPI_VictorSPX) driveTrainRightMotor);
        driveTrainRightMotor.setInverted(false);
        
        driveTrainRightMotorFollow = new VictorSPX(3);
        driveTrainRightMotorFollow.setInverted(driveTrainRightMotor.getInverted());
        driveTrainRightMotorFollow.set(ControlMode.Follower, driveTrainRightMotor.getDeviceID());
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotor, driveTrainRightMotor);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        
        elevationLeft = new WPI_VictorSPX(4);
        elevationLeft.setInverted(false);
        elevationRight = new WPI_VictorSPX(5);
        elevationRight.setInverted(true);

        leftHighLimitSwitch = new DigitalInput(0);
        leftLowLimitSwitch = new DigitalInput(1);
        rightHighLimitSwitch = new DigitalInput(2);
        rightLowLimitSwitch = new DigitalInput(3);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}

